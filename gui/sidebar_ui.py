# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'sidebar.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
from PIL import Image
from PyQt5 import QtCore, QtGui, QtWidgets
sys.path.append('../tool/src/')
from capierre import Capierre
from capierreAnalyzer import CapierreAnalyzer
from capierreImage import CapierreImage
from capierreParsing import CapierreParsing

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1613, 936)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setSpacing(0)
        self.gridLayout.setObjectName("gridLayout")


        self.sidebar_full = QtWidgets.QWidget(self.centralwidget)
        self.sidebar_full.setObjectName("sidebar_full")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.sidebar_full)
        self.verticalLayout_5.setContentsMargins(0, 9, 0, 9)
        self.verticalLayout_5.setSpacing(9)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.top_left_header_full = QtWidgets.QWidget(self.sidebar_full)
        self.top_left_header_full.setObjectName("top_left_header_full")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.top_left_header_full)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 9)
        self.horizontalLayout.setSpacing(10)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label_10 = QtWidgets.QLabel(self.top_left_header_full)
        self.label_10.setEnabled(True)
        self.label_10.setMinimumSize(QtCore.QSize(60, 60))
        self.label_10.setText("")
        self.label_10.setPixmap(QtGui.QPixmap(":/icon/icon/favicon-64.png"))
        self.label_10.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_10.setObjectName("label_10")
        self.horizontalLayout.addWidget(self.label_10)
        self.verticalLayout_7 = QtWidgets.QVBoxLayout()
        self.verticalLayout_7.setSpacing(0)
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.title_top = QtWidgets.QLabel(self.top_left_header_full)
        self.title_top.setObjectName("title_top")
        self.verticalLayout_7.addWidget(self.title_top)
        self.description_2 = QtWidgets.QLabel(self.top_left_header_full)
        self.description_2.setObjectName("description_2")
        self.verticalLayout_7.addWidget(self.description_2)
        self.horizontalLayout.addLayout(self.verticalLayout_7)
        self.verticalLayout_5.addWidget(self.top_left_header_full)
        self.icon_sidebar_full = QtWidgets.QWidget(self.sidebar_full)
        self.icon_sidebar_full.setObjectName("icon_sidebar_full")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.icon_sidebar_full)
        self.verticalLayout_4.setContentsMargins(-1, 0, 9, 0)
        self.verticalLayout_4.setSpacing(0)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.home_btn = QtWidgets.QPushButton(self.icon_sidebar_full)
        self.home_btn.setMinimumSize(QtCore.QSize(50, 50))
        home_icon = QtGui.QIcon()
        home_icon.addPixmap(QtGui.QPixmap(":/icon/icon/cil-star.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.home_btn.setIcon(home_icon)
        self.home_btn.setIconSize(QtCore.QSize(25, 25))
        self.home_btn.setCheckable(True)
        self.home_btn.setAutoExclusive(True)
        self.home_btn.setObjectName("home_btn")
        self.verticalLayout_4.addWidget(self.home_btn) 
        self.retrieve_btn_3 = QtWidgets.QPushButton(self.icon_sidebar_full)
        self.retrieve_btn_3.setMinimumSize(QtCore.QSize(50, 50))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/icon/icon/cil-zoom-in.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.retrieve_btn_3.setIcon(icon)
        self.retrieve_btn_3.setIconSize(QtCore.QSize(25, 25))
        self.retrieve_btn_3.setCheckable(True)
        self.retrieve_btn_3.setAutoExclusive(True)
        self.retrieve_btn_3.setObjectName("retrieve_btn_3")
        self.verticalLayout_4.addWidget(self.retrieve_btn_3)
        self.hide_btn_2 = QtWidgets.QPushButton(self.icon_sidebar_full)
        self.hide_btn_2.setMinimumSize(QtCore.QSize(50, 50))
        self.hide_btn_2.setMaximumSize(QtCore.QSize(229, 16777215))
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/icon/icon/cil-file.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.hide_btn_2.setIcon(icon1)
        self.hide_btn_2.setIconSize(QtCore.QSize(25, 25))
        self.hide_btn_2.setShortcut("")
        self.hide_btn_2.setCheckable(True)
        self.hide_btn_2.setAutoExclusive(True)
        self.hide_btn_2.setObjectName("hide_btn_2")
        self.verticalLayout_4.addWidget(self.hide_btn_2)
        self.challenges_btn_2 = QtWidgets.QPushButton(self.icon_sidebar_full)
        self.challenges_btn_2.setMinimumSize(QtCore.QSize(0, 50))
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/icon/icon/cil-folder-open.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.challenges_btn_2.setIcon(icon2)
        self.challenges_btn_2.setIconSize(QtCore.QSize(25, 25))
        self.challenges_btn_2.setCheckable(True)
        self.challenges_btn_2.setAutoExclusive(True)
        self.challenges_btn_2.setObjectName("challenges_btn_2")
        self.verticalLayout_4.addWidget(self.challenges_btn_2)
        self.verticalLayout_5.addWidget(self.icon_sidebar_full)
        spacerItem = QtWidgets.QSpacerItem(20, 696, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_5.addItem(spacerItem)
        self.exit_btn_widget_full = QtWidgets.QWidget(self.sidebar_full)
        self.exit_btn_widget_full.setObjectName("exit_btn_widget_full")
        self.horizontalLayout_9 = QtWidgets.QHBoxLayout(self.exit_btn_widget_full)
        self.horizontalLayout_9.setContentsMargins(-1, 0, -1, 0)
        self.horizontalLayout_9.setSpacing(0)
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")
        self.exit_btn_2 = QtWidgets.QPushButton(self.exit_btn_widget_full)
        self.exit_btn_2.setMinimumSize(QtCore.QSize(30, 30))
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(":/icon/icon/cil-exit-to-app.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.exit_btn_2.setIcon(icon3)
        self.exit_btn_2.setIconSize(QtCore.QSize(25, 25))
        self.exit_btn_2.setCheckable(True)
        self.exit_btn_2.setObjectName("exit_btn_2")
        self.horizontalLayout_9.addWidget(self.exit_btn_2)
        self.verticalLayout_5.addWidget(self.exit_btn_widget_full)
        self.gridLayout.addWidget(self.sidebar_full, 0, 1, 1, 1)
        self.sidebar_icon = QtWidgets.QWidget(self.centralwidget)
        self.sidebar_icon.setObjectName("sidebar_icon")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.sidebar_icon)
        self.verticalLayout_2.setContentsMargins(0, 9, 0, 9)
        self.verticalLayout_2.setSpacing(9)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.top_left_header_min = QtWidgets.QWidget(self.sidebar_icon)
        self.top_left_header_min.setObjectName("top_left_header_min")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.top_left_header_min)
        self.horizontalLayout_3.setContentsMargins(0, 0, 0, 9)
        self.horizontalLayout_3.setSpacing(0)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.logo_3 = QtWidgets.QLabel(self.top_left_header_min)
        self.logo_3.setMinimumSize(QtCore.QSize(60, 60))
        self.logo_3.setText("")
        self.logo_3.setPixmap(QtGui.QPixmap(":/icon/icon/favicon-64.png"))
        self.logo_3.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.logo_3.setObjectName("logo_3")
        self.horizontalLayout_3.addWidget(self.logo_3)
        self.verticalLayout_2.addWidget(self.top_left_header_min)
        self.icon_sidebar_min = QtWidgets.QWidget(self.sidebar_icon)
        self.icon_sidebar_min.setObjectName("icon_sidebar_min")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.icon_sidebar_min)
        self.verticalLayout_3.setContentsMargins(-1, 0, 9, 0)
        self.verticalLayout_3.setSpacing(0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.home_btn_2 = QtWidgets.QPushButton(self.icon_sidebar_min)
        self.home_btn_2.setMinimumSize(QtCore.QSize(50, 50))
        self.home_btn_2.setText("")
        self.home_btn_2.setIcon(home_icon)
        self.home_btn_2.setIconSize(QtCore.QSize(25, 25))
        self.home_btn_2.setCheckable(True)
        self.home_btn_2.setAutoExclusive(True)
        self.home_btn_2.setObjectName("home_btn_2")
        self.verticalLayout_3.addWidget(self.home_btn_2)
        self.retrieve_btn_2 = QtWidgets.QPushButton(self.icon_sidebar_min)
        self.retrieve_btn_2.setMinimumSize(QtCore.QSize(50, 50))
        self.retrieve_btn_2.setText("")
        self.retrieve_btn_2.setIcon(icon)
        self.retrieve_btn_2.setIconSize(QtCore.QSize(25, 25))
        self.retrieve_btn_2.setCheckable(True)
        self.retrieve_btn_2.setAutoExclusive(True)
        self.retrieve_btn_2.setObjectName("retrieve_btn_2")
        self.verticalLayout_3.addWidget(self.retrieve_btn_2)
        self.hide_btn_1 = QtWidgets.QPushButton(self.icon_sidebar_min)
        self.hide_btn_1.setMinimumSize(QtCore.QSize(50, 50))
        self.hide_btn_1.setText("")
        self.hide_btn_1.setIcon(icon1)
        self.hide_btn_1.setIconSize(QtCore.QSize(25, 25))
        self.hide_btn_1.setCheckable(True)
        self.hide_btn_1.setAutoExclusive(True)
        self.hide_btn_1.setObjectName("hide_btn_1")
        self.verticalLayout_3.addWidget(self.hide_btn_1)
        self.challenges_btn_1 = QtWidgets.QPushButton(self.icon_sidebar_min)
        self.challenges_btn_1.setMinimumSize(QtCore.QSize(50, 50))
        self.challenges_btn_1.setText("")
        self.challenges_btn_1.setIcon(icon2)
        self.challenges_btn_1.setIconSize(QtCore.QSize(25, 25))
        self.challenges_btn_1.setCheckable(True)
        self.challenges_btn_1.setAutoExclusive(True)
        self.challenges_btn_1.setObjectName("challenges_btn_1")
        self.verticalLayout_3.addWidget(self.challenges_btn_1)
        self.verticalLayout_2.addWidget(self.icon_sidebar_min)
        spacerItem1 = QtWidgets.QSpacerItem(20, 698, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_2.addItem(spacerItem1)
        self.exit_widget_min = QtWidgets.QWidget(self.sidebar_icon)
        self.exit_widget_min.setObjectName("exit_widget_min")
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout(self.exit_widget_min)
        self.horizontalLayout_8.setContentsMargins(-1, 0, -1, 0)
        self.horizontalLayout_8.setSpacing(0)
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        self.exit_btn_3 = QtWidgets.QPushButton(self.exit_widget_min)
        self.exit_btn_3.setMinimumSize(QtCore.QSize(30, 30))
        self.exit_btn_3.setText("")
        self.exit_btn_3.setIcon(icon3)
        self.exit_btn_3.setIconSize(QtCore.QSize(25, 25))
        self.exit_btn_3.setCheckable(True)
        self.exit_btn_3.setObjectName("exit_btn_3")
        self.horizontalLayout_8.addWidget(self.exit_btn_3)
        self.verticalLayout_2.addWidget(self.exit_widget_min)
        self.gridLayout.addWidget(self.sidebar_icon, 0, 0, 1, 1)
        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setObjectName("widget")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.widget)
        self.verticalLayout_6.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_6.setSpacing(0)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.header_bar = QtWidgets.QWidget(self.widget)
        self.header_bar.setObjectName("header_bar")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.header_bar)
        self.horizontalLayout_2.setContentsMargins(9, 9, 9, 19)
        self.horizontalLayout_2.setSpacing(9)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.show_btn_1 = QtWidgets.QPushButton(self.header_bar)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.show_btn_1.sizePolicy().hasHeightForWidth())
        self.show_btn_1.setSizePolicy(sizePolicy)
        self.show_btn_1.setMinimumSize(QtCore.QSize(50, 50))
        self.show_btn_1.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.show_btn_1.setAutoFillBackground(False)
        self.show_btn_1.setText("")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(":/icon/icon/cil-menu.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.show_btn_1.setIcon(icon4)
        self.show_btn_1.setIconSize(QtCore.QSize(25, 25))
        self.show_btn_1.setCheckable(True)
        self.show_btn_1.setObjectName("show_btn_1")
        self.horizontalLayout_2.addWidget(self.show_btn_1)
        spacerItem2 = QtWidgets.QSpacerItem(743, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem2)
        self.description = QtWidgets.QLabel(self.header_bar)
        self.description.setObjectName("description")
        self.horizontalLayout_2.addWidget(self.description)
        self.settings_btn_1 = QtWidgets.QPushButton(self.header_bar)
        self.settings_btn_1.setText("")
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap(":/icon/icon/cil-options-horizontal.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.settings_btn_1.setIcon(icon5)
        self.settings_btn_1.setIconSize(QtCore.QSize(25, 25))
        self.settings_btn_1.setCheckable(True)
        self.settings_btn_1.setObjectName("settings_btn_1")
        self.horizontalLayout_2.addWidget(self.settings_btn_1)
        self.verticalLayout_6.addWidget(self.header_bar)
        self.stackedWidget = QtWidgets.QStackedWidget(self.widget)
        self.stackedWidget.setObjectName("stackedWidget")

          # --- Welcome Page ---
        self.welcome_page = QtWidgets.QWidget()
        self.welcome_page.setObjectName("welcome_page")
        welcome_layout = QtWidgets.QVBoxLayout(self.welcome_page)
        welcome_layout.setContentsMargins(60, 60, 60, 60)
        welcome_layout.setSpacing(20)

        welcome_title = QtWidgets.QLabel("👋 Welcome to PyCapierre")
        welcome_title.setStyleSheet("font-size: 28px; font-weight: bold; color: white;")
        welcome_title.setAlignment(QtCore.Qt.AlignCenter)
        welcome_layout.addWidget(welcome_title)

        welcome_text = QtWidgets.QLabel(
        "🧪 <b>What is Steganography?</b><br><br>"
        "Steganography is the art of hiding messages within other non-secret files or data – like images or binary executables – "
        "so that only the sender and receiver know it's there. Unlike encryption, which makes data unreadable, steganography hides its very existence.<br><br>"

        "👨‍💻 <b>What this app does:</b><br><br>"
        "🔹 <b>Hide</b>: Embed a secret message into an image or binary file using a password and encryption.<br>"
        "🔹 <b>Retrieve</b>: Extract the hidden message from a file if you know the correct password.<br>"
        "🔹 <b>Challenges</b>: Practice your stego skills! Whether you're a beginner or advanced, solve guided challenges to improve your understanding.<br><br>"

        "💡 Whether you're learning or testing advanced techniques, <b>PyCapierre</b> helps make stéganographie accessible to everyone.")
        welcome_text.setWordWrap(True)
        welcome_text.setStyleSheet("font-size: 18px; color: #bbb; line-height: 1.4;")
        welcome_text.setAlignment(QtCore.Qt.AlignTop)
        welcome_layout.addWidget(welcome_text)
        self.stackedWidget.addWidget(self.welcome_page)

        # --- Retrieve Page ---
        self.retrieve_page = QtWidgets.QWidget()
        self.retrieve_page.setObjectName("retrieve_page")
        self.gridLayout_4 = QtWidgets.QGridLayout(self.retrieve_page)
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.widget_6 = QtWidgets.QWidget(self.retrieve_page)
        self.widget_6.setObjectName("widget_6")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.widget_6)
        self.verticalLayout.setObjectName("verticalLayout")
        self.title_retrieve = QtWidgets.QLabel(self.widget_6)
        self.retrieve_intro = QtWidgets.QLabel(self.widget_6)
        self.retrieve_intro.setText("Use this form to extract a hidden message from a file. You may need to provide a password.")
        self.retrieve_intro.setWordWrap(True)
        self.retrieve_intro.setStyleSheet("""
            color: #ccc;
            font-size: 15px;
            font-weight: 500;
            padding-bottom: 15px;
        """)
        self.title_retrieve.setObjectName("title_retrieve")
        self.verticalLayout.addWidget(self.title_retrieve)
        self.verticalLayout.insertWidget(1, self.retrieve_intro)
        self.checkBox_mode = QtWidgets.QCheckBox(text="Binary Mode")
        self.checkBox_mode.setStyleSheet("""
            color: #aaa;
        """)
        self.verticalLayout.addWidget(self.checkBox_mode)
        self.widget_7 = QtWidgets.QWidget(self.widget_6)
        self.widget_7.setObjectName("widget_7")
        self.horizontalLayout_11 = QtWidgets.QHBoxLayout(self.widget_7)
        self.horizontalLayout_11.setObjectName("horizontalLayout_11")
        self.label_2 = QtWidgets.QLabel(self.widget_7)
        self.label_2.setObjectName("label_2")
        self.horizontalLayout_11.addWidget(self.label_2)
        self.lineEdit_4 = QtWidgets.QLineEdit(self.widget_7)
        self.lineEdit_4.setMinimumSize(QtCore.QSize(0, 30))
        self.lineEdit_4.setObjectName("lineEdit_4")
        self.horizontalLayout_11.addWidget(self.lineEdit_4)
        self.open_button_2 = QtWidgets.QPushButton(self.widget_7)
        self.open_button_2.setMinimumSize(QtCore.QSize(100, 30))
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap(":/icon/icon/cil-folder-open.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.open_button_2.setIcon(icon6)
        self.open_button_2.setObjectName("open_button_2")
        self.horizontalLayout_11.addWidget(self.open_button_2)
        self.verticalLayout.addWidget(self.widget_7)
        self.filepath_info = QtWidgets.QLabel(self.widget_6)
        self.filepath_info.setText("Select the file (image or binary) that contains the hidden message.")
        self.filepath_info.setStyleSheet("""
            color: #aaa;
            font-size: 16px;
            margin-top: 5px;
            padding-left: 5px;
        """)
        self.filepath_info.setWordWrap(True)
        self.verticalLayout.insertWidget(self.verticalLayout.indexOf(self.widget_7) + 1, self.filepath_info)
        self.widget_8 = QtWidgets.QWidget(self.widget_6)
        self.widget_8.setObjectName("widget_8")
        self.horizontalLayout_12 = QtWidgets.QHBoxLayout(self.widget_8)
        self.horizontalLayout_12.setObjectName("horizontalLayout_12")
        self.label_3 = QtWidgets.QLabel(self.widget_8)
        self.label_3.setObjectName("label_3")
        self.horizontalLayout_12.addWidget(self.label_3)
        self.lineEdit_5 = QtWidgets.QLineEdit(self.widget_8)
        self.lineEdit_5.setMinimumSize(QtCore.QSize(0, 30))
        self.lineEdit_5.setObjectName("lineEdit_5")
        self.horizontalLayout_12.addWidget(self.lineEdit_5)
        self.verticalLayout.addWidget(self.widget_8)
        self.password_info = QtWidgets.QLabel(self.widget_6)
        self.password_info.setText("If the message was encrypted, enter the password to decrypt it.")
        self.password_info.setStyleSheet("""
            color: #aaa;
            font-size: 16px;
            margin-top: 5px;
            padding-left: 5px;
        """)
        self.password_info.setWordWrap(True)
        self.verticalLayout.insertWidget(self.verticalLayout.indexOf(self.widget_8) + 1, self.password_info)
        self.widget_9 = QtWidgets.QWidget(self.widget_6)
        self.widget_9.setObjectName("widget_9")
        self.horizontalLayout_10 = QtWidgets.QHBoxLayout(self.widget_9)
        self.horizontalLayout_10.setObjectName("horizontalLayout_10")
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_10.addItem(spacerItem3)
        self.confirm_btn_2 = QtWidgets.QPushButton(self.widget_9)
        self.confirm_btn_2.setMinimumSize(QtCore.QSize(100, 30))
        self.confirm_btn_2.setLayoutDirection(QtCore.Qt.RightToLeft)
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap(":/icon/icon/cil-check-alt.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.confirm_btn_2.setIcon(icon7)
        self.confirm_btn_2.setObjectName("confirm_btn_2")
        self.horizontalLayout_10.addWidget(self.confirm_btn_2)
        self.verticalLayout.addWidget(self.widget_9)
        self.gridLayout_4.addWidget(self.widget_6, 0, 0, 1, 1)
        self.stackedWidget.addWidget(self.retrieve_page)
        self.hide_page = QtWidgets.QWidget()
        self.hide_page.setObjectName("hide_page")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.hide_page)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.widget_10 = QtWidgets.QWidget(self.hide_page)
        self.widget_10.setObjectName("widget_10")
        self.verticalLayout_8 = QtWidgets.QVBoxLayout(self.widget_10)
        self.verticalLayout_8.setObjectName("verticalLayout_8")

        # --- Hide Page ---
        self.title_hide = QtWidgets.QLabel(self.widget_10)
        self.title_hide.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.title_hide.setObjectName("title_hide")
        self.verticalLayout_8.addWidget(self.title_hide)
        self.intro_label = QtWidgets.QLabel(self.widget_10)
        self.intro_label.setText("Use this form to hide a secret message inside a file. Provide a password for encryption.")
        self.intro_label.setWordWrap(True)
        self.intro_label.setStyleSheet("""
            color: #ccc;
            font-size: 16px;
            font-weight: 500;
            padding-bottom: 15px;
        """)
        self.intro_label.setAlignment(QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.verticalLayout_8.addWidget(self.intro_label)
        self.checkBox_file = QtWidgets.QCheckBox(text="File Mode")
        self.checkBox_file.toggled.connect(self.update_on_file_select)
        self.checkBox_file.setStyleSheet("""
            color: #aaa;
        """)
        self.verticalLayout_8.addWidget(self.checkBox_file)
        self.widget_4 = QtWidgets.QWidget(self.widget_10)
        self.widget_4.setObjectName("widget_4")
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout(self.widget_4)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.label_9 = QtWidgets.QLabel(self.widget_4)
        self.label_9.setObjectName("label_9")
        self.horizontalLayout_6.addWidget(self.label_9)
        self.lineEdit_3 = QtWidgets.QLineEdit(self.widget_4)
        self.lineEdit_3.setMinimumSize(QtCore.QSize(0, 30))
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.horizontalLayout_6.addWidget(self.lineEdit_3)
        self.verticalLayout_8.addWidget(self.widget_4)
        self.widget_2 = QtWidgets.QWidget(self.widget_10)
        self.widget_2.setObjectName("widget_2")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.widget_2)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.label_4 = QtWidgets.QLabel(self.widget_2)
        self.label_4.setObjectName("label_4")
        self.horizontalLayout_4.addWidget(self.label_4)
        self.password_help = QtWidgets.QLabel(self.widget_10)
        self.password_help.setText("This password will be used to encrypt your message.")
        self.password_help.setStyleSheet("color: #888; font-size: 16px;")
        self.password_help.setWordWrap(True)
        self.verticalLayout_8.insertWidget(self.verticalLayout_8.indexOf(self.widget_4) + 1, self.password_help)
        self.lineEdit = QtWidgets.QLineEdit(self.widget_2)
        self.lineEdit.setMinimumSize(QtCore.QSize(0, 30))
        self.lineEdit.setObjectName("lineEdit")
        self.horizontalLayout_4.addWidget(self.lineEdit)
        self.open_button = QtWidgets.QPushButton(self.widget_2)
        self.open_button.setMinimumSize(QtCore.QSize(100, 30))
        self.open_button.setIcon(icon6)
        self.open_button.setObjectName("open_button")
        self.horizontalLayout_4.addWidget(self.open_button)
        self.verticalLayout_8.addWidget(self.widget_2)
        self.widget_3 = QtWidgets.QWidget(self.widget_10)
        self.widget_3.setObjectName("widget_3")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.widget_3)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.label_7 = QtWidgets.QLabel(self.widget_3)
        self.label_7.setObjectName("label_7")
        self.horizontalLayout_5.addWidget(self.label_7)
        self.lineEdit_2 = QtWidgets.QLineEdit(self.widget_3)
        self.lineEdit_2.setMinimumSize(QtCore.QSize(0, 30))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.horizontalLayout_5.addWidget(self.lineEdit_2)
        self.verticalLayout_8.addWidget(self.widget_3)
        self.widget_5 = QtWidgets.QWidget(self.widget_10)
        self.widget_5.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.widget_5.setObjectName("widget_5")
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout(self.widget_5)
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.confirm_btn = QtWidgets.QPushButton(self.widget_5)
        self.confirm_btn.setMinimumSize(QtCore.QSize(100, 30))
        self.confirm_btn.setIcon(icon7)
        self.confirm_btn.setObjectName("confirm_btn")
        self.horizontalLayout_7.addWidget(self.confirm_btn)
        spacerItem4 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_7.addItem(spacerItem4)
        self.verticalLayout_8.addWidget(self.widget_5)
        self.gridLayout_3.addWidget(self.widget_10, 0, 0, 1, 1)
        self.sentence_help = QtWidgets.QLabel(self.widget_10)
        self.sentence_help.setText("Enter the secret message you want to embed into the selected file.")
        self.sentence_help.setStyleSheet("color: #888; font-size: 16px;")
        self.sentence_help.setWordWrap(True)
        self.verticalLayout_8.insertWidget(self.verticalLayout_8.indexOf(self.widget_3) + 1, self.sentence_help)
        self.stackedWidget.addWidget(self.hide_page)
        self.challenges_page = QtWidgets.QWidget()
        self.challenges_page.setObjectName("challenges_page")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.challenges_page)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.label_8 = QtWidgets.QLabel(self.challenges_page)
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        self.label_8.setFont(font)
        self.label_8.setText("Challenges Page")
        self.label_8.setScaledContents(False)
        self.label_8.setAlignment(QtCore.Qt.AlignCenter)
        self.label_8.setObjectName("label_8")
        self.gridLayout_2.addWidget(self.label_8, 0, 0, 1, 1)
        self.filepath_help = QtWidgets.QLabel(self.widget_10)
        self.filepath_help.setText("Choose the file (image or binary) where the message will be hidden.")
        self.filepath_help.setStyleSheet("color: #888; font-size: 16px;")
        self.filepath_help.setWordWrap(True)
        self.verticalLayout_8.insertWidget(self.verticalLayout_8.indexOf(self.widget_2) + 1, self.filepath_help)
        self.stackedWidget.addWidget(self.challenges_page)
        self.verticalLayout_6.addWidget(self.stackedWidget)
        self.gridLayout.addWidget(self.widget, 0, 2, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)

        # --- Challenge List ---
        self.challenge_list = QtWidgets.QListWidget(self.challenges_page)
        self.challenge_list.setObjectName("challenge_list")
        self.gridLayout_2.addWidget(self.challenge_list, 1, 0, 1, 1)

        self.retranslateUi(MainWindow)
        self.stackedWidget.setCurrentIndex(0)
        self.exit_btn_2.clicked.connect(MainWindow.close) # type: ignore
        self.show_btn_1.toggled['bool'].connect(self.sidebar_full.setVisible) # type: ignore
        self.show_btn_1.toggled['bool'].connect(self.sidebar_icon.setHidden) # type: ignore
        self.exit_btn_3.clicked.connect(MainWindow.close) # type: ignore

        self.retrieve_btn_3.toggled['bool'].connect(self.retrieve_btn_2.setChecked)
        self.home_btn.toggled['bool'].connect(lambda checked: self.stackedWidget.setCurrentIndex(0) if checked else None)
        self.home_btn_2.toggled['bool'].connect(lambda checked: self.stackedWidget.setCurrentIndex(0) if checked else None)
        self.retrieve_btn_3.toggled['bool'].connect(lambda checked: self.stackedWidget.setCurrentIndex(1) if checked else None)
        self.retrieve_btn_2.toggled['bool'].connect(lambda checked: self.stackedWidget.setCurrentIndex(1) if checked else None)
        self.hide_btn_1.toggled['bool'].connect(lambda checked: self.stackedWidget.setCurrentIndex(2) if checked else None)
        self.hide_btn_2.toggled['bool'].connect(lambda checked: self.stackedWidget.setCurrentIndex(2) if checked else None)
        self.challenges_btn_1.toggled['bool'].connect(lambda checked: self.stackedWidget.setCurrentIndex(3) if checked else None)
        self.challenges_btn_2.toggled['bool'].connect(lambda checked: self.stackedWidget.setCurrentIndex(3) if checked else None) # type: ignore
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def update_on_file_select(self):

        if (self.checkBox_file.isChecked() == True):
            icon6 = QtGui.QIcon()
            icon6.addPixmap(QtGui.QPixmap(":/icon/icon/cil-folder-open.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
            open_button = QtWidgets.QPushButton(self.widget_2)
            open_button.setMinimumSize(QtCore.QSize(100, 30))
            open_button.setIcon(icon6)
            open_button.setText("Open")
            open_button.setObjectName("open_button")
            self.horizontalLayout_5.addWidget(open_button, 0)
        else:
            self.horizontalLayout_5.itemAt(2).widget().deleteLater()

    def show_info_messagebox(self): 
        msg = QtWidgets.QMessageBox() 
        msg.setIcon(QtWidgets.QMessageBox.Information) 
        msg.setText("SUCCESS: Binary compiled successfully.")
        msg.setWindowTitle("Information MessageBox") 
        msg.setStandardButtons(QtWidgets.QMessageBox.Ok)
        msg.exec_()

    def show_info_messagebox_retrieve(self): 
        msg = QtWidgets.QMessageBox() 
        msg.setIcon(QtWidgets.QMessageBox.Information) 
        msg.setText("SUCCESS: Content extracted successfully.")
        msg.setWindowTitle("Information MessageBox") 
        msg.setStandardButtons(QtWidgets.QMessageBox.Ok)
        msg.exec_()

    def show_info_failure(self): 
        msg = QtWidgets.QMessageBox() 
        msg.setIcon(QtWidgets.QMessageBox.Information) 
        msg.setText("FAILURE: Unsupported file.")
        msg.setWindowTitle("Information MessageBox") 
        msg.setStandardButtons(QtWidgets.QMessageBox.Ok)
        msg.exec_()

    def detect_correct_type(self, box_value_file: str) -> str:

        magic_numbers = {
            "png": bytes([0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A]),
            "elf": bytes([0x7F, 0x45, 0x4C, 0x46]),
            "mach-o": bytes([0xCF, 0xFA, 0xED, 0xFE]),
            "macho-o-universal": bytes([0xCA, 0xFE, 0xBA, 0xBE]),
        }

        extension_files = {
            "c": ".c",
            "cpp": ".cpp",
            "png": ".png"
        }

        value: str = str()

        with open(box_value_file, "rb") as fd:
            file_head = fd.read()

        for name, magic in magic_numbers.items():
            if file_head.startswith(magic):
                value = name
                break

        if value == "":
            for name, end in extension_files.items():
                if box_value_file.endswith(end):
                    value = name
                    break

            if value == "":
                self.show_info_failure()

        return value


    def hide_action(self):


        box_value_file: str = self.lineEdit.text()
        box_value_sentence: str = self.lineEdit_2.text()
        box_value_password: str = self.lineEdit_3.text()
        value: str = self.detect_correct_type(box_value_file)

        if (self.checkBox_file.isChecked() == True):
            if os.path.exists(box_value_sentence) == False:
                msg_error(f"File not found: {file_index}")
                return
            with open(file_index, "r") as file:
                box_value_sentence = file.read()

        if value == "":
            return
        elif value != "png":
            capierreObject = Capierre(
                box_value_file,
                value,
                box_value_sentence,
                box_value_password,
                "result_binary.bin",
            )
            capierreObject.hide_information()
        else:
            image = Image.open(box_value_file)
            capierreObject = CapierreImage(
                image,
                "Modified Picture.png",
                42
            )
            capierreObject.hide(box_value_sentence.encode())
            image.close()
        self.show_info_messagebox()
        self.lineEdit.setText("")
        self.lineEdit_2.setText("")
        self.lineEdit_3.setText("")

    def retrieve_action(self):

        box_value_file: str = self.lineEdit_4.text()
        box_value_password: str = self.lineEdit_5.text()
        value: str = self.detect_correct_type(box_value_file)

        if value == "":
            return
        elif value != "png":
            capierreObject = CapierreAnalyzer(
                box_value_file,
                "MESSAGE",
                box_value_password,
            )
            if (self.checkBox_mode.isChecked() == False):
                capierreObject.retrieve_message_from_binary()
            else:
                capierreObject.read_in_compiled_binaries()
        else:
            image = Image.open(box_value_file)
            capierreObject = CapierreImage(
                image,
                "MESSAGE",
                42
            )
            capierreObject.extract()
            image.close()
        self.show_info_messagebox_retrieve()
        self.lineEdit_4.setText("")
        self.lineEdit_5.setText("")

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        self.stackedWidget.setCurrentWidget(self.welcome_page)
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.home_btn.setText(_translate("MainWindow", "Home"))
        self.title_top.setText(_translate("MainWindow", "PyCapierre"))
        self.description_2.setText(_translate("MainWindow", "Modern GUI / Flat Style "))
        self.retrieve_btn_3.setText(_translate("MainWindow", "Retrieve"))
        self.hide_btn_2.setText(_translate("MainWindow", "Hide"))
        self.challenges_btn_2.setText(_translate("MainWindow", "Challenges"))
        self.exit_btn_2.setText(_translate("MainWindow", "Exit"))
        self.description.setText(_translate("MainWindow", "PyCapierre APP - Steganography tool with binary"))
        self.title_retrieve.setText(_translate("MainWindow", "Retrieve Data"))
        self.label_2.setText(_translate("MainWindow", "Filepath"))
        self.open_button_2.setText(_translate("MainWindow", "Open"))
        self.label_3.setText(_translate("MainWindow", "Password"))
        self.confirm_btn_2.setText(_translate("MainWindow", "Confirm"))
        self.title_hide.setText(_translate("MainWindow", "Hide Data"))
        self.label_9.setText(_translate("MainWindow", "Password"))
        self.label_4.setText(_translate("MainWindow", "Filepath"))
        self.open_button.setText(_translate("MainWindow", "Open"))
        self.label_7.setText(_translate("MainWindow", "Sentence"))
        self.confirm_btn.setText(_translate("MainWindow", "Confirm"))
        self.label_8.setText(_translate("MainWindow", "Challenges Page"))
        self.confirm_btn.clicked.connect(self.hide_action)
        self.confirm_btn_2.clicked.connect(self.retrieve_action)
import resource_rc
